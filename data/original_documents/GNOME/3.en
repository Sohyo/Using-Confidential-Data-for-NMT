Verifying interfaces , methods , and properties
The API Browser Plugin allows you to verify interfaces , methods , and properties of a target accessible widget in an application .
To run the API Browser Plugin , select an accessible widget in the Application Tree View . Double-clicking a widget highlights it in the application 's interface , so you can be sure whether a certain widget were the one you were looking for .
After that , select one of the widget 's interfaces in the combobox . All public methods of the selected interface will be listed in the plugin 's leftmost column . All public properties , with their corresponding values , will be listed in the plugin 's rightmost column .
Be aware that nodes with many children take a long time to expand .
Bookmarking items in the Application Tree View
The Event Monitor Plugin allows you to view AT-SPI events and match them with accessible widgets .
When you open the Event Monitor Plugin , you see a list of checkboxes representing all the different AT-SPI event classes covered by the plugin :
If you check a class , all of its event types will be monitored by the plugin . The classes are exposed as tree structures ; therefore , you can refine your selection by expanding them and checking only the event types you really care about .
Selecting only a few event types per monitoring gives you a clearer output .
For each incoming event , the Event Monitor Plugin indicates the source and the application . Activating the link for either of these items will cause it to become selected in the Application Tree View .
Accerciser Accerciser the gnome.org FTP site the gnome.org GIT repository
. / autogen.sh # or . / configure for first time installation
sudo make install # or make install as root
from accerciser.plugin import Plugin import gtk import pyatspi
Next we will derive a new class from the Plugin base class , and assign some mandatory class attributes :
class FocusSelect ( Plugin ) : plugin _ name = ' Focus Select ' plugin _ description = ' Allows selecting last focused accessible . '
def init ( self ) : pyatspi.Registry.registerEventListener ( self.accEventFocusChanged , ' focus ' ) self.global _ hotkeys = [ ( ' Inspect last focused accessible ' , self.inspectLastFocused , gtk.keysyms.e , gtk.gdk.CONTROL _ MASK | gtk.gdk.MOD1 _ MASK ) ] self.last _ focused = None
def accEventFocusChanged ( self , event ) : if not self.isMyApp ( event.source ) : self.last _ focused = event.source
def inspectLastFocused ( self ) : if self.last _ focused : self.node.update ( self.last _ focused )
Then we add a class definition , with a plugin name and description :
class PushButtonFocus ( ConsolePlugin ) : plugin _ name = ' Push Button Focus ' plugin _ description = ' Print event when pushbutton get \ \ ' s focus . '
def init ( self ) : pyatspi.Registry.registerEventListener ( self.accEventFocusChanged , ' focus ' )
def accEventFocusChanged ( self , event ) : if event.source.getRole ( ) = = pyatspi.ROLE _ PUSH _ BUTTON : self.appendText ( str ( event ) + ' \ ' )
Next , a class definition , with a name and description :
class Clicker ( ViewportPlugin ) : plugin _ name = ' Clicker ' plugin _ description = ' Test the " click " action in relevant accessibles . '
def init ( self ) : alignment = gtk.Alignment ( 0.5,0.5,0,0 ) self.click _ button = gtk.Button ( ' Click me ! ' ) alignment.add ( self.click _ button ) self.plugin _ area.add ( alignment ) self.click _ button.connect ( ' clicked ' , self.onClick ) self.show _ all ( )
def accSupportedActions ( self ) : try : ai = self.node.acc.queryAction ( ) except NotImplementedError : action _ names = [ ] else : action _ names = [ ai.getName ( i ) for i in xrange ( ai.nActions ) ] return action _ names
def onAccChanged ( self , acc ) : has _ click = ' click ' in self.accSupportedActions ( ) self.click _ button.set _ sensitive ( has _ click )
def onClick ( self , button ) : ai = self.node.acc.queryAction ( ) action _ names = [ ai.getName ( i ) for i in xrange ( ai.nActions ) ] ai.doAction ( action _ names.index ( ' click ' ) )
Given a selected item in the Application Tree View , all of its AT-SPI interfaces will be shown as sensitive in the Interface Viewer Plugin . Those unsupported will appear grayed out , such as the Application and Collection interfaces in the figure above .
Accerciser Application Tree View Accerciser ctrl t ctrl t
Accessibility is a core value that should touch all aspects of a Desktop Environment . To help achieve it in GNOME , some libraries were developed , such as ATK and AT-SPI . Though originated in GNOME , these libraries are now also used in other Desktop Environments . To learn more about Accessibility Libraries for GNU / UNIX systems , you can consult :
To run the IPython Console Plugin , select one of the accessible items listed in the Application Tree View - either an application or a widget . In the plugin , the selected item will correspond to the variable ' acc ' .
The IPython Console Plugin lets you investigate methods , constants , and properties related to a selected item in the Application Tree View .
Right-clicking on any given plugin allows you to choose its location : " Top Panel " , " Bottom Panel " , and " New View " . Selecting " New View " creates a new window for the plugin .
You may bypass the Preferences dialog by using drag and drop to move a plugin from a location to another .
The AT-SPI Validator Plugin generates a report with accessibility issues related to a target application . For each error , the report includes the severity level and a brief description .
The AT-SPI Validator Plugin generates useful reports for verifying the accessibility of a target application .
To run the AT-SPI Validator Plugin , select an item in the Application Tree View . The validator will generate the report with respect to the selected item and all of its descendant widgets in the tree hierarchy .
