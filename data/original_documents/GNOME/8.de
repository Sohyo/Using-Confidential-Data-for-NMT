Prüfen von Ansichten , Funktionen und Eigenschaften
Mit dem API-Browser-Plugin können Sie Oberflächen , Funktionen und auch Eigenschaften eines barrierefreien Widgets einer Anwendung prüfen .
Um das API-Browser-Plugin zu starten , wählen Sie ein barrierefreies Widget in der Anwendungs-Baumansicht aus . Durch einen Doppelklick darauf wird das Widget in der Oberfläche der Anwendung hervorgehoben , sodass Sie sicher sagen können , ob ein bestimmtes Widget jenes ist , nach dem Sie suchen .
Danach können Sie eine der Widget-Oberflächen in der Auswahlbox auswählen . Alle öffentlichen Methoden der ausgewählten Oberfläche werden dann in der Spalte ganz links beim Plugin angezeigt . Alle öffentlichen Eigenschaften , mit ihren dazugehörigen Werten , werden dann in der Spalte ganz rechts beim Plugin gelistet .
Beachten Sie , dass Knoten mit vielen Unterelementen viel Zeit zum Erweitern brauchen .
Lesezeichen für Objekte in der Anwendungs-Baumansicht anlegen
Mit dem Ereignisüberwachung-Plugin können Sie AT-SPI-Ereignisse beobachten und diese mit einem barrierefreien Widget verknüpfen .
Wenn Sie das Ereignisüberwachung-Plugin starten , sehen Sie ein Liste mit Ankreuzfeldern , welche für alle verschiedenen AT-SPI Ereignisklassen stehen , die das Plugin zur Verfügung stellt .
Wenn Sie eine Klasse wählen , werden alle ihre Ereignistypen durch das Plugin überwacht . Die Klassen sind als Baumansicht dargestellt , d.h. Sie können Ihre Auswahl durch Erweiterung und Auswahl relevanter Ereignistypen verfeinern , welche Sie interessieren .
Wenn Sie nur wenige Ereignistypen zur Überwachung auswählen , erhalten Sie eine übersichtlichere Ausgabe .
Für jedes auftretende Ereignis zeigt das Ereignisüberwachung-Plugin Quelle und Anwendung an . Durch das Aktivieren des Links von einem der Objekte wird es in der Anwendungs-Baumansicht ausgewählen .
Accerciser Accerciser der FTP-Seite von gnome.org dem gnome.org GIT-Softwarebestand
./ autogen.sh # oder ./ configure für die Erstinstallation
sudo make install # oder make install als Root
from accerciser.plugin import Plugin import gtk import pyatspi
Anschließend leiten wir eine neue Klasse aus der Basis-Plugin-Klasse ab und ordnen einige obligatorische Klassenattribute zu :
class FocusSelect(Plugin ) : plugin_name = 'Focus Select ' plugin_description = 'Allows selecting last focused accessible . '
def init(self ) : pyatspi . Registry.registerEventListener(self.accEventFocusChanged , 'focus ' ) self.global_hotkeys = [ ( 'Inspect last focused accessible ' , self.inspectLastFocused , gtk.keysyms.e , gtk.gdk . CONTROL_MASK | gtk.gdk . MOD1_MASK ) ] self.last_focused = None
def accEventFocusChanged(self , event ) : if not self.isMyApp(event.source ) : self.last_focused = event.source
def inspectLastFocused(self ) : if self.last_focused : self.node.update(self.last_focused )
Dann definieren wir eine Klasse , mit dem Namen des Plugins und einer Beschreibung :
class PushButtonFocus(ConsolePlugin ) : plugin_name = 'Push Button Focus ' plugin_description = 'Print event when pushbutton get\\'s focus . '
def init(self ) : pyatspi . Registry.registerEventListener(self.accEventFocusChanged , 'focus ' )
def accEventFocusChanged(self , event ) : if event.source.getRole( ) == pyatspi . ROLE_PUSH_BUTTON : self.appendText(str(event)+'\ ' )
Danach folgt eine Klassendefinition mit Name und Beschreibung :
class Clicker(ViewportPlugin ) : plugin_name = 'Clicker ' plugin_description = 'Test the " click " action in relevant accessibles . '
def init(self ) : alignment = gtk . Alignment(0.5,0.5,0,0 ) self.click_button = gtk . Button('Click me ! ' ) alignment.add(self.click_button ) self.plugin_area.add(alignment ) self.click_button.connect('clicked ' , self.onClick ) self.show_all( )
def accSupportedActions(self ) : try : ai = self.node.acc.queryAction( ) except NotImplementedError : action_names = [ ] else : action_names = [ ai.getName(i ) for i in xrange(ai.nActions ) ] return action_names
def onAccChanged(self , acc ) : has_click = 'click ' in self.accSupportedActions( ) self.click_button.set_sensitive(has_click )
def onClick(self , button ) : ai = self.node.acc.queryAction( ) action_names = [ ai.getName(i ) for i in xrange(ai.nActions ) ] ai.doAction(action_names.index('click ' ) ) text
Indem Sie ein Objekt in der Anwendungsbaumansicht auswählen , werden alle ihre AT-SPI-Schnittstellen im Schnittstellenanzeige-Plugin anklickbar angezeigt . Nicht unterstützte Schnittstellen werden grau dargestellt , z.B. die Anwendungs- und Zeichensatzschnittstelle im Bild oben .
Accerciser Anwendungsbaumansicht Accerciser Strg t Strg t
Barrierefreiheit ist einer der Grundwerte , welche alle Aspekte einer Arbeitsumgebung betreffen sollte . Um das in GNOME zu erreichen , wurden einige Bibliotheken entwickelt , wie z.B. ATK und AT-SPI . Obwohl eigentlich in GNOME beheimatet , werden diese Bibliotheken nun auch bei anderen Arbeitsumgebungen verwendet . Um mehr über die Barrierefreiheitsbibliotheken für GNU/ UNIX-Systeme zu erfahren , können Sie folgende Seite besuchen :
Um das IPyton-Konsolen-Plugin zu starten , wählen Sie eines der barrierefreien Objekte in der Anwendungsbaumansicht aus - entweder eine Anwendung oder ein Widget . Im Plugin ist das ausgewählte Objekt dann über die Variable » acc « erreichbar .
Mit dem IPyton-Konsolen-Plugin können Sie Funktionen , Konstanten und Eigenschaften eines ausgewählten Objekts in der Anwendungsbaumansicht erforschen .
Indem Sie auf ein Plugin mit der rechten Maustaste klicken , können Sie seine Position festlegen : » Oberes Fenster « , » Unteres Fenster « und » Neues Fenster « . Wenn Sie » Neues Fenster « auswählen , erstellen Sie ein neues Fenster für das Plugin .
Sie können den Einstellungsdialog umgehen , indem Sie ein Plugin von einem an einen anderen Ort ziehen .
Das AT-SPI Überprüfung-Plugin erstellt einen Bericht Problem der Barrierefreiheit in Bezug auf die Zielanwendung . Zu jedem Fehler stellt der Bericht den Schweregrad des Fehlers sowie eine kurze Beschreibung zur Verfügung .
Das AT-SPI Überprüfung-Plugin erstellt nützliche Berichte , um die Barrierefreiheit einer Zielanwendung zu überprüfen .
Um das AT-SPI Überprüfung-Plugin auszuführen , wählen Sie ein Objekt in der Anwendungsbaumansicht . Das Plugin wird einen Bericht erstellen , in welchem es das ausgewählte Objekt und alle seiner Unteranwendungen in der Baumhierarchie beachtet .
