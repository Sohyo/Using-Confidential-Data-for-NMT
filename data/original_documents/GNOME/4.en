You may bypass the Preferences dialog by using drag and drop to move a plugin from a location to another .
from accerciser.plugin import Plugin import gtk import pyatspi
Next we will derive a new class from the Plugin base class , and assign some mandatory class attributes :
class FocusSelect ( Plugin ) : plugin _ name = ' Focus Select ' plugin _ description = ' Allows selecting last focused accessible . '
def init ( self ) : pyatspi.Registry.registerEventListener ( self.accEventFocusChanged , ' focus ' ) self.global _ hotkeys = [ ( ' Inspect last focused accessible ' , self.inspectLastFocused , gtk.keysyms.e , gtk.gdk.CONTROL _ MASK | gtk.gdk.MOD1 _ MASK ) ] self.last _ focused = None
def accEventFocusChanged ( self , event ) : if not self.isMyApp ( event.source ) : self.last _ focused = event.source
def inspectLastFocused ( self ) : if self.last _ focused : self.node.update ( self.last _ focused )
class PushButtonFocus ( ConsolePlugin ) : plugin _ name = ' Push Button Focus ' plugin _ description = ' Print event when pushbutton get \ \ ' s focus . '
def init ( self ) : pyatspi.Registry.registerEventListener ( self.accEventFocusChanged , ' focus ' )
def accEventFocusChanged ( self , event ) : if event.source.getRole ( ) = = pyatspi.ROLE _ PUSH _ BUTTON : self.appendText ( str ( event ) + ' \ ' )
Next , a class definition , with a name and description :
class Clicker ( ViewportPlugin ) : plugin _ name = ' Clicker ' plugin _ description = ' Test the " click " action in relevant accessibles . '
def init ( self ) : alignment = gtk.Alignment ( 0.5,0.5,0,0 ) self.click _ button = gtk.Button ( ' Click me ! ' ) alignment.add ( self.click _ button ) self.plugin _ area.add ( alignment ) self.click _ button.connect ( ' clicked ' , self.onClick ) self.show _ all ( )
def accSupportedActions ( self ) : try : ai = self.node.acc.queryAction ( ) except NotImplementedError : action _ names = [ ] else : action _ names = [ ai.getName ( i ) for i in xrange ( ai.nActions ) ] return action _ names
def onAccChanged ( self , acc ) : has _ click = ' click ' in self.accSupportedActions ( ) self.click _ button.set _ sensitive ( has _ click )
def onClick ( self , button ) : ai = self.node.acc.queryAction ( ) action _ names = [ ai.getName ( i ) for i in xrange ( ai.nActions ) ] ai.doAction ( action _ names.index ( ' click ' ) )
. / autogen.sh # or . / configure for first time installation
sudo make install # or make install as root
Bookmarking items in the Application Tree View
